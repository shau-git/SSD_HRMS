const Joi = require('joi');

const attendanceSchema = Joi.object({
    // attendance_id:
    // This is usually auto-generated by the database, so it's not typically
    // part of the Joi schema for creation/update, unless you're expecting it for updates.
    // For creation, it should be omitted. For updates, it would be `.required()`
    // and likely part of the route parameters, not the body.
    // We'll exclude it for now, assuming this schema is for creating new attendance records.
    // If you need it for updates, you'd add:
    // attendance_id: Joi.number().integer().positive(),

    employee_id: Joi.number()
        .integer()
        .positive() // Assuming employee_id is always positive
        .required()
        .messages({
            'any.required': 'Employee ID is required.',
            'number.base': 'Employee ID must be a number.',
            'number.integer': 'Employee ID must be an integer.',
            'number.positive': 'Employee ID must be a positive number.'
    }),

    leave_id: Joi.number()
        .integer()
        .positive() 
        .allow(null) // allowNull: true, defaultValue: null
        .messages({
            'number.base': 'Leave ID must be a number.',
            'number.integer': 'Leave ID must be an integer.',
            'number.positive': 'Leave ID must be a positive number.'
    }),

    is_amended: Joi.boolean()
        .required()
        .messages({
            'any.required': 'is_amended is required.',
            'boolean.base': 'is_amended must be a boolean.'
    }),

    clock_in: Joi.date()
        .iso() // Expects ISO 8601 date string, which is good practice for APIs
        .allow(null) // allowNull: true. Though your default is CURRENT_TIMESTAMP, for input, it can be null.
                     // If you always expect it on input, change to .required()
        .messages({
            'date.base': 'Clock in must be a valid date.',
            'date.iso': 'Clock in must be an ISO 8601 date string.'
    }),

    clock_out: Joi.date()
        .iso()
        .allow(null)
        // Custom validation for clock_out to be after clock_in
        .when('clock_in', {
            is: Joi.exist().not(null), // Only apply this rule if clock_in exists and is not null
            then: Joi.date().greater(Joi.ref('clock_in')).messages({
                'date.greater': 'Clock out time must be after clock in time.'
            }),
            otherwise: Joi.optional() // If clock_in is null, clock_out can be anything (or null as allowed)
        })
        .messages({
            'date.base': 'Clock out must be a valid date.',
            'date.iso': 'Clock out must be an ISO 8601 date string.'
    }),

    edit_date_time: Joi.date()
        .iso()
        .allow(null)
        .messages({
            'date.base': 'Edit date time must be a valid date.',
            'date.iso': 'Edit date time must be an ISO 8601 date string.'
    }),

    response_date_time: Joi.date()
        .iso()
        .allow(null)
        // Custom validation for response_date_time to be after edit_date_time
        .when('edit_date_time', {
            is: Joi.exist().not(null),
            then: Joi.date().greater(Joi.ref('edit_date_time')).messages({
                'date.greater': 'Response time must be after edit time.'
            }),
            otherwise: Joi.optional()
        })
        .messages({
            'date.base': 'Response date time must be a valid date.',
            'date.iso': 'Response date time must be an ISO 8601 date string.'
    }),

    withdraw_date_time: Joi.date()
        .iso()
        .allow(null)
        // Custom validation for withdraw_date_time to be after edit_date_time
        .when('edit_date_time', {
            is: Joi.exist().not(null),
            then: Joi.date().greater(Joi.ref('edit_date_time')).messages({
                'date.greater': 'Withdraw time must be after edit time.'
            }),
            otherwise: Joi.optional()
        })
        .messages({
            'date.base': 'Withdraw date time must be a valid date.',
            'date.iso': 'Withdraw date time must be an ISO 8601 date string.'
    }),

    is_ot: Joi.boolean()
        .required()
        .messages({
            'any.required': 'is_ot is required.',
            'boolean.base': 'is_ot must be a boolean.'
    }),

    total_min_work: Joi.number()
        .integer()
        .min(0)
        .max(1440)
        .allow(null) // If it can be null (before clock_out is set), then allow null
                     // If it's always calculated and shouldn't be provided, remove from schema or make it optional for updates only.
        .messages({
            'number.base': 'Total minutes worked must be a number.',
            'number.integer': 'Total minutes worked must be an integer.',
            'number.min': 'Total minutes worked cannot be negative.',
            'number.max': 'Total minutes worked cannot be greater than 1440 (24 hours).'
    }),

    remarks: Joi.string()
        .max(60)
        .allow(null, '') // Allow null or empty string as per defaultValue: null
        .messages({
            'string.base': 'Remarks must be a string.',
            'string.max': 'Remarks cannot exceed 60 characters.'
    }),

    manager_id: Joi.number()
        .integer()
        .positive()
        .messages({
            'number.base': 'Manager ID must be a number.',
            'number.integer': 'Manager ID must be an integer.',
            'number.positive': 'Manager ID must be a positive number.',
            'any.required':'Manager ID is required'
    })
});

module.exports = attendanceSchema;